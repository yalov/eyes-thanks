#include <QApplication>
//#include <QDesktopWidget>
#include <QDebug>
#include <QString>
#include <QXmlStreamWriter>
#include <QFile>
#include <QTextStream>
#include <QRect>


#include <QtWidgets/QApplication>

#include "transliteration-iso9a.h"
#include "charactersets.h"
#include "global.h"

#include <stdio.h>
#include <windows.h>
#include <lm.h>

#ifndef UNICODE
#define UNICODE
#endif

//#pragma comment(lib, "Ole32.lib")
//#pragma comment(lib, "advapi32.lib")
//#pragma comment(lib, "netapi32.lib")

#include <windows.h>
#include <stdio.h>
#include <assert.h>
#include <lm.h>
#include <sddl.h>


/* for ConvertSidToStringSid function */
#include <QJsonObject>
#include <QJsonArray>
#include <QJsonDocument>
#include <QString>
#include <QTextBoundaryFinder>

void f1 () {
    QVector<QString> list = {
        QString("–ê—Ñ–∞–Ω–∞—Å–∏–π –ï—Ñ—Ä–µ'–º–æ–≤")                 ,
        QString("–í—è—á–µ—Å–ª–∞–≤ –ö–æ–Ω–æ–≤–∞–ª–æ–≤")               ,
        QString("–ú–∞–∫—Å–∏–º –ù–∞–∑–∞—Ä–æ–≤")                   ,
        QString("–§–∏–ª–∏–ø–ø “ê–∞–ª—É–±—ë—û")                   ,
        QString("–¢–æ–ª—Å—Ç–æ–π –ö–∏—Ä–∏–ª–ª –≠–¥—É–∞—Ä–¥–æ–≤–∏—á")        ,
        QString("–ö–∞—Ä–∞–µ–≤ –ú—Å—Ç–∏—Å–ª–∞–≤ –ï–≤–≥–µ–Ω–∏–µ–≤–∏—á")       ,
        QString("–®–µ–ø–∫–∏–Ω –ú–∞—Ä–∫ –ö–∞—Å—å—è–Ω–æ–≤–∏—á")           ,
        QString("–©–µ–≥–æ–ª—è–µ–≤ –ê–¥—Ä–∏–∞–Ω –ú–∞—Ç–≤–µ–µ–≤–∏—á")        ,
        QString("–î–∞–≤—ã–¥–æ–≤ –¢–∏–º—É—Ä –°–≤—è—Ç–æ—Å–ª–∞–≤–æ–≤–∏—á")      ,
        QString("–†–∞–∑—É–≤–∞–µ–≤ –ü–ª–∞—Ç–æ–Ω –ï–ª–∏–∑–∞—Ä–æ–≤–∏—á")       ,
        QString("–ë—É—Ä–∫–∏–Ω –ò–ø–∞—Ç–∏–π –í–µ–Ω–µ–¥–∏–∫—Ç–æ–≤–∏—á")       ,
        QString("–ì—Ä–∏–±–∫–æ–≤ –Ø–∫–æ–≤ –õ–µ–≤–æ–≤–∏—á")             ,
        QString("–û—Å—Ç–∞–ª—å—Ü–µ–≤ –†—É—Å–ª–∞–Ω –§–µ–¥–æ—Å–∏–µ–≤–∏—á")      ,
        QString("–ö–æ—Ä—Ç–Ω–µ–≤ –ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π –í–∏–∫–µ–Ω—Ç–∏–µ–≤–∏—á")   ,
        QString("–•–æ–±–æ—Ç–∏–ª–æ–≤ –°–µ—Ä–≥–µ–π –û–ª–µ–≥–æ–≤–∏—á")        ,
        QString("–ì–æ—Ä—é—à–∏–Ω –ï–≤–≥–µ–Ω–∏–π –ò–≥–Ω–∞—Ç–∏–µ–≤–∏—á")       ,
        QString("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ü–∏–º–µ–Ω –ò–ª—å–µ–≤–∏—á")        ,
        QString("–ö–æ–±–∑–µ–≤ –î–∞–Ω–∏–ª–∞ –ï–ª–∏—Å–µ–µ–≤–∏—á")          ,
        QString("–ú–æ–∑–≥–æ–≤–æ–π –û—Å–∏–ø –ü–∞—Ö–æ–º–æ–≤–∏—á")          ,
        QString("–ö–æ—à–∫–∏–Ω –ò–∑–º–∞–∏–ª –ü–ª–∞—Ç–æ–Ω–æ–≤–∏—á")         ,
        QString("–ì–∞–¥–æ–ª–∏–Ω –í–∏—Å—Å–∞—Ä–∏–æ–Ω –ö–æ–Ω–¥—Ä–∞—Ç–æ–≤–∏—á")    ,
        QString("–®–æ—Å—Ç–µ–Ω–∫–æ –ö–∏–º –ö—É–ø—Ä–∏—è–Ω–æ–≤–∏—á")         ,
        QString("–î—Ä—É–≥–æ–≤ –≠–º–º–∞–Ω—É–∏–ª –ú–µ—á–∏—Å–ª–∞–≤–æ–≤–∏—á")     ,
        QString("–ë–µ–Ω–µ–¥–∏–∫—Ç–æ–≤ –í–ª–∞–¥–∏–º–∏—Ä –î–∞–Ω–∏–∏–ª–æ–≤–∏—á")   ,
        QString("–ö–æ—Ä–æ—Ç–∞–µ–≤ –î–º–∏—Ç—Ä–∏–π –¢–∞—Ä–∞—Å–æ–≤–∏—á")       ,
        QString("–û–Ω–µ–≥–∏–Ω –ù–∏–∫–æ–Ω –§–∏–ª–∏–º–æ–Ω–æ–≤–∏—á")         ,
        QString("–í–µ—Ä—è—Å–æ–≤ –†—é—Ä–∏–∫ –ö–∞–∑–∏–º–∏—Ä–æ–≤–∏—á")        ,
        QString("–Ø–≤–ª–µ–Ω—Å–∫–∏–π –í—è—á–µ—Å–ª–∞–≤ –ù–∏–∫–æ–Ω–æ–≤–∏—á")     ,
        QString("–°–∏—è—Å–∏–Ω–æ–≤ –ü—Ä–æ—Ö–æ—Ä –¢–∏—Ö–æ–Ω–æ–≤–∏—á")        ,
        QString("–ê–≥–∞–ø–æ–≤ –ö–∞—Å—å—è–Ω –ò–ø–∞—Ç–∏–µ–≤–∏—á")          ,
        QString("–ñ–∏—Ç–∫–æ–≤ –õ–µ–æ–Ω–¥–∏–π –í–∞–ª–µ—Ä–∏–µ–≤–∏—á")        ,
        QString("–Ø—Ö–∏–Ω –ì—Ä–∏–≥–æ—Ä–∏–π –î–∞–≤–∏–¥–æ–≤–∏—á")          ,
        QString("–ü—É—à–∫–∞—Ä—ë–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∏—Ä–æ—Å–ª–∞–≤–æ–≤–∏—á")  ,
        QString("–≠—Å—Å–µ–Ω –í–∞–ª–µ–Ω—Ç–∏–Ω –ò–∑–º–∞–∏–ª–æ–≤–∏—á")        ,
        QString("–©–µ—Ç–∏–Ω–∏–Ω –†–∞–¥–∏–æ–Ω –¢—Ä–æ—Ñ–∏–º–æ–≤–∏—á")        ,
        QString("–õ—è—Å–∫–æ–≤–µ—Ü –î–∞–Ω–∏–ª –ë—Ä–æ–Ω–∏—Å–ª–∞–≤–æ–≤–∏—á")     ,
        QString("–ó–µ–º–ª—è–∫–æ–≤ –ê–∫–∏–º –ï—Ä–º–æ–ª–∞–µ–≤–∏—á")         ,
        QString("–ú–∏–ª—é—Ç–∏–Ω –î–∞–Ω–∏–∏–ª –°–∏–¥–æ—Ä–æ–≤–∏—á")         ,
        QString("–ì–µ—Ä—à–∫–æ–≤–∏—á –ê–Ω—Ç–∏–ø –ú–æ–∏—Å–µ–µ–≤–∏—á")        ,
        QString("–°–æ–¥–æ–≤—Å–∫–∏–π –ö—É–∑—å–º–∞ –ú–∏—Ö–µ–µ–≤–∏—á")};

    for (auto name: list) {
        qDebug() << list.indexOf(name);
        LogToFile("names.txt", QString("%1; %2")
                  .arg(name,40)
                  .arg(transliteraction(name),40)
                  );
}
}

#ifdef false
void f2 () {
    QString str = "–©Z“ê";//u8"–©Z“ê";
    QChar z = u'Z';
    QChar g = u'“ê';

    if (g == "“ê")  qDebug() <<"g ="<< g << "is \"“ê\"";
    if (g == u'“ê') qDebug() <<"g ="<< g << "is \'“ê\'";

    if (z == "Z") qDebug()<<"z =" << z << "is \"Z\"";
    if (z == 'Z') qDebug()<<"z =" << z << "is \'Z\'";

    for (QChar c:str)
    {
        if (c == "“ê") qDebug()<<"c =" << c << "is \"“ê\"";
        if (c == u'“ê') qDebug()<<"c =" << c << "is \'“ê\'";

        if (c == "Z") qDebug()<<"c =" << c << "is \"Z\"";
        if (c == 'Z') qDebug()<<"c =" << c << "is \'Z\'";
    }
}


void f3() {
    QString str = QString("'‚Äô") + QChar(0x02BC);
    for (auto c:str)
    {
        qDebug() << "islower" << c.isLower() <<"isletter" << c.isLetter();
    }
}

QList<QString> f4()
{
    QList<QString> s;
    QFile file("c:/Users/User/Repositories/eyes-thanks/test.xml");
    if (file.open(QIODevice::ReadOnly)) {
        QXmlStreamReader xml(file.readAll());
        file.close();

        while (!xml.atEnd()) {
            xml.readNext();
            if (xml.isStartElement() && xml.name() == "set")
            {
                while (xml.readNextStartElement())
                {
                    if (xml.name() == "title") s.append(xml.readElementText());
                }
            }
        }
    }

    return s;
}

#endif

struct Asset
{
    QString version{};
    QList<QString> links{};
    QString toString(){
        return version +", "+ links.join(", ");
    }
};

Asset json_test(const QByteArray & json_text)
{
    Asset asset;
    QJsonDocument jsonDocument(QJsonDocument::fromJson(json_text));

    if (jsonDocument.isNull() || jsonDocument.isEmpty() || !jsonDocument.isArray())
    {
        qDebug() << "JSON failed";
        return asset;
    }

    const QJsonArray &json = jsonDocument.array();

    for (auto json_value: json)
    {
        if (!json_value.isObject()) continue;

        auto json_ver = json_value.toObject();
        if (json_ver.contains("assets"))
        {
            auto json_assets_obj = json_ver["assets"];
            if (!json_assets_obj.isArray()) continue;
            auto json_assets = json_assets_obj.toArray();
            for (auto asset_vref: json_assets){
                if (!asset_vref.isObject()) continue;
                auto a = asset_vref.toObject();
                if (!a.contains("browser_download_url")) continue;

                asset.links.append(a["browser_download_url"].toString());

            }

            if (!asset.links.empty())
            {
                if (json_ver.contains("tag_name"))
                    asset.version = json_ver["tag_name"].toString();

                return asset;
            }
        }

    }

    return asset;
}

void f5()
{
    QFile loadFile(QStringLiteral("d:/Downloads/releases.json"));

    if (!loadFile.open(QIODevice::ReadOnly)) {
        qWarning("Couldn't open save file.");
        return;
    }

    QByteArray saveData = loadFile.readAll();

    Asset a = json_test(saveData);
    qDebug() << a.toString();
}


void GraphemeCounter(QString s)
{
    qDebug()  << "String: " << s;
    qDebug()  << "Code unit count       : " << s.length();

    QTextBoundaryFinder tbf(QTextBoundaryFinder::Grapheme, s);
    int count=0;
    while(tbf.toNextBoundary()!=-1) ++count;

    qDebug() << "QTextBoundaryFinder::Grapheme count: " << count;

    qDebug() << "toUcs4 count: " << s.toUcs4().size();

    QDebug deb = qDebug();
    foreach (auto c, s.toUcs4())
        deb << QChar::fromUcs4(c);

}

int main()
{
    QString test = "a" + QString::fromUtf16(u"\U0001D161") + "a";
    GraphemeCounter(test);

    QString  a = QString::fromUtf16(u"ùï¨ùï≠ùïÆùïØùï∞ùï±ùï≤ùï≥ùï¥ùïµùï∂ùï∑ùï∏ùïπùï∫ùïªùïºùïΩùïæùïøùñÄùñÅùñÇùñÉùñÑùñÖùñÜùñáùñàùñâùñäùñãùñåùñçùñéùñèùñêùñëùñíùñìùñîùñïùññùñóùñòùñôùñöùñõùñúùñùùñûùñü");
    GraphemeCounter(a);


    const QString s=QString::fromUtf8(u8"abc\U00010139def\U00010102g");
    GraphemeCounter(s);
}
